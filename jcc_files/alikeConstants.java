/* Generated By:JavaCC: Do not edit this line. alikeConstants.java */
package traductor;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface alikeConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LETTER = 1;
  /** RegularExpression Id. */
  int DIGIT = 2;
  /** RegularExpression Id. */
  int UNDERSCORE = 3;
  /** RegularExpression Id. */
  int tSPACE = 4;
  /** RegularExpression Id. */
  int tNL = 5;
  /** RegularExpression Id. */
  int tTAB = 6;
  /** RegularExpression Id. */
  int tENTER = 7;
  /** RegularExpression Id. */
  int tBOOL = 8;
  /** RegularExpression Id. */
  int tCHAR = 9;
  /** RegularExpression Id. */
  int tCHARACTR = 10;
  /** RegularExpression Id. */
  int tINTEGER = 11;
  /** RegularExpression Id. */
  int tNULL = 12;
  /** RegularExpression Id. */
  int tARRAY = 13;
  /** RegularExpression Id. */
  int tCONST_CHAR = 14;
  /** RegularExpression Id. */
  int tCONST_STRING = 15;
  /** RegularExpression Id. */
  int tCOMMENT = 16;
  /** RegularExpression Id. */
  int tASIGN = 17;
  /** RegularExpression Id. */
  int tSUM = 18;
  /** RegularExpression Id. */
  int tRES = 19;
  /** RegularExpression Id. */
  int tEQU = 20;
  /** RegularExpression Id. */
  int tGT = 21;
  /** RegularExpression Id. */
  int tLT = 22;
  /** RegularExpression Id. */
  int tGE = 23;
  /** RegularExpression Id. */
  int tLE = 24;
  /** RegularExpression Id. */
  int tMUL = 25;
  /** RegularExpression Id. */
  int tMOD = 26;
  /** RegularExpression Id. */
  int tDIV = 27;
  /** RegularExpression Id. */
  int tNOT = 28;
  /** RegularExpression Id. */
  int tIF = 29;
  /** RegularExpression Id. */
  int tELIF = 30;
  /** RegularExpression Id. */
  int tTHEN = 31;
  /** RegularExpression Id. */
  int tWHILE = 32;
  /** RegularExpression Id. */
  int tLOOP = 33;
  /** RegularExpression Id. */
  int tPROCEDURE = 34;
  /** RegularExpression Id. */
  int tIS = 35;
  /** RegularExpression Id. */
  int tREF = 36;
  /** RegularExpression Id. */
  int tOF = 37;
  /** RegularExpression Id. */
  int tBEGIN = 38;
  /** RegularExpression Id. */
  int tEND = 39;
  /** RegularExpression Id. */
  int tRETURN = 40;
  /** RegularExpression Id. */
  int tSKIP_LN = 41;
  /** RegularExpression Id. */
  int tPUT = 42;
  /** RegularExpression Id. */
  int tPUT_LN = 43;
  /** RegularExpression Id. */
  int tGET = 44;
  /** RegularExpression Id. */
  int tCHAR2INT = 45;
  /** RegularExpression Id. */
  int tINT2CHAR = 46;
  /** RegularExpression Id. */
  int tPUNTO = 47;
  /** RegularExpression Id. */
  int tCOMA = 48;
  /** RegularExpression Id. */
  int tDOSPUNTOS = 49;
  /** RegularExpression Id. */
  int tDOBLEPUNTO = 50;
  /** RegularExpression Id. */
  int tPUNTOCOMA = 51;
  /** RegularExpression Id. */
  int tCORCHETES_OPEN = 52;
  /** RegularExpression Id. */
  int tCORCHETES_CLOSE = 53;
  /** RegularExpression Id. */
  int tPARENTESIS_OPEN = 54;
  /** RegularExpression Id. */
  int tPARENTESIS_CLOSE = 55;
  /** RegularExpression Id. */
  int tID = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<LETTER>",
    "<DIGIT>",
    "\"_\"",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "\"boolean\"",
    "\"char\"",
    "\"character\"",
    "\"integer\"",
    "\"null\"",
    "\"array\"",
    "<tCONST_CHAR>",
    "<tCONST_STRING>",
    "\"--\"",
    "\":=\"",
    "\"+\"",
    "\"-\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"*\"",
    "\"mod\"",
    "\"/\"",
    "\"not\"",
    "\"if\"",
    "\"elsif\"",
    "\"then\"",
    "\"while\"",
    "\"loop\"",
    "\"procedure\"",
    "\"is\"",
    "\"ref\"",
    "\"of\"",
    "\"begin\"",
    "\"end\"",
    "\"return\"",
    "\"skip_line\"",
    "\"put\"",
    "\"put_line\"",
    "\"get\"",
    "\"char2int\"",
    "\"int2char\"",
    "\".\"",
    "\",\"",
    "\"..\"",
    "\":\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "<tID>",
  };

}
