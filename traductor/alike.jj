//*****************************************************************
// File:   cl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   julio 2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
	IGNORE_CASE = true;
	COMMON_TOKEN_ACTION = false;
}

// ----------------------------------------------------------------------------


PARSER_BEGIN(alike)

package traductor;

//...

public class alike {
   //...
   
   public static void main(String[] args) {
	   alike parser = null;
	   
	   try {
		   if(args.length == 0) {
			   parser = new alike(System.in);
		   }
		   else {
			   parser = new alike(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.err.println("LEX_ERROR: " + e.getMessage());
	   }
	   //...
   }
}
PARSER_END(alike)

// ----------------------------------------------------------------------------

TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

TOKEN : { 
|	< tSPACE: " " >
| 	< tNL: "\n" >
|	< tTAB: "\t" >
}

TOKEN : { // Tipos
|	< tBOOL: "bool" >
|	< tCHAR: "char" >
|	< tCHARACTR: "character" >
|   < tINTEGER: "integer" >
|	< tNULL: "null" >
}

TOKEN : { // Operadores
|	< tCOMMENT: "--" >
|	< tASIGN: ":=" >
|	< tSUM: "+" >
|   < tRES: "-" >
|	< tEQU: "=" >
|	< tGT: ">" >
|	< tLT: "<" >
|	< tGE: ">=" >
|	< tLE: "<=" >
|	< tMUL: "*" >
|	< tMOD: "mod" >
|	< tDIV: "/" >
}

TOKEN : { // Sintaxis reservada estructuras simples
|	< tIF: "if" >
|	< tELIF: "elsif" >
|	< tTHEN: "then" >
|	< tWHILE: "while" >
|	< tLOOP: "loop" >
}

TOKEN : { // Sintaxis reservada funciones
|	< tPROCEDURE: "procedure" >
|	< tIS: "is" >
|	< tREF: "ref" >
|	< tBEGIN: "begin" >
|	< tEND: "end" >
|	< tRETURN: "return" >
}

TOKEN : { // Instrucciones E/S
|	< tSKIP_LN: "skip_line" >
|	< tPUT: "put" >
|	< tPUT_LN: "put_line" >
|	< tGET: "get" >
}

TOKEN : { // Separadores
|	< tPUNTO: "." >
|	< tCOMA:	"," >
|	< tDOSPUNTOS: ".." >
|	< tDOBLEPUNTO: ":" >
|	< tPUNTOCOMA: ";" >
|	< tCORCHETES_OPEN: "[" >
|	< tCORCHETES_CLOSE: "]" >
|	< tPARENTESIS_OPEN: "(" >
|	< tPARENTESIS_CLOSE: ")" >
|	< tCOMILLA_DOBLE: "\"" >
|	< tCOMILLA_SIMPLE: "\'" >
}


//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void Programa() : 
{
	Token t;
}
{
   ( 
	   < tBEGIN > | < tSPACE > | < tNL > | < tTAB > | 
	   < tBOOL > | < tCHAR > | < tCHARACTR > | < tINTEGER > | < tNULL > |
	   < tCOMMENT > | < tASIGN > | < tSUM > | < tRES > | < tEQU > | < tGT > | < tLT > | < tGE > | < tLE > | < tMUL > | < tMOD > | < tDIV > |
	   < tIF > | < tELIF > |	< tTHEN > |	< tWHILE > | < tLOOP > |
	   < tPROCEDURE > | < tIS > | < tREF > | < tBEGIN > | < tEND > | < tRETURN >
	   < tSKIP_LN > | < tPUT > | < tPUT_LN > | < tGET > |
	   < tPUNTO > |	< tCOMA > |	< tDOSPUNTOS > | < tDOBLEPUNTO > | < tPUNTOCOMA > |	< tCORCHETES_OPEN > | < tCORCHETES_CLOSE > | < tPARENTESIS_OPEN > |	< tPARENTESIS_CLOSE > |	< tCOMILLA_DOBLE > | < tCOMILLA_SIMPLE >
   )+
   < EOF >
}

/*
 * 
 * //MAIN UNIT
void fichero(InfoFich info) : 
{
	Token t;
}
{
	( 
		t = < tPALABRA >
		{
			info.nPal++;
			info.nChar += t.endColumn - t.beginColumn + 1;
		}
	|	t = < tNL >
		{
			info.nLin++;
			info.nChar++;
		}
	|	t = < tTAB >
		{
			info.nChar++;
		}
	)+
}
 */